<?php

namespace common\models;

use Yii;

/**
 * This is the model class for table "app_classify".
 *
 * @property integer $id
 * @property string $name
 * @property integer $pid
 * @property string $type
 * @property integer $created_at
 * @property integer $updated_at
 */
class Classify extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'app_classify';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [[ 'name'], 'required'],
            [['type', 'created_at', 'updated_at'],'safe'],
            [['id', 'pid', 'created_at', 'updated_at'], 'integer'],
            [['name', 'type'], 'string', 'max' => 255],
        ];
    }

    public function behaviors()
    {
        return [
            \yii\behaviors\TimestampBehavior::className(),
        ];
    }
    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => '分类名',
            'pid' => '上一级id，默认0',
            'type' => '分类类别（1->了解途径，2->接单来源，3->房屋类型，4->主要渗漏部位）',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
        ];
    }

    //获取第一层分类   by:xuan
    public static function classifyfirst(){
        $classify_array = ['0'=>'请选择分类'];
        $classify = self::find()->where("pid=:pid",[':pid'=>0])->all();
        if(isset($classify)){
            foreach ($classify as $key => $value) {
                if($value['name'] != "维修订单状态"){
                   $classify_array[$value['id']] = $value['name']; 
                }
                
            }
        }
        return $classify_array;
    }

    //根据分类id，返回分类的名称  by:xuan
    public static function classifyName($id){
        $classify = self::findOne($id);
        return isset($classify) ? $classify->name : "未知";
    }

    //找出所有接单来源，返回数组（id=>name)   by:xuan
    public static function sourcesArray(){
        $sources_array = [""=>"请选择接单来源"];
        $sources = self::find()->where("pid=:pid",[':pid'=>Yii::$app->params['sources']])->all();
        if(isset($sources)){
            foreach ($sources as $key => $value) {
                $sources_array[$value['id']] = $value['name'];
            }
        }
        return $sources_array;
    }

    //找出所有了解途径，返回数组（id=>name)   by:xuan
    public static function understandWayArray(){
        $understandWay_array = [""=>"请选择了解途径"];
        $understandWay = self::find()->where("pid=:pid",[':pid'=>Yii::$app->params['understandWay']])->all();
        if(isset($understandWay)){
            foreach ($understandWay as $key => $value) {
                $understandWay_array[$value['id']] = $value['name'];
            }
        }
        return $understandWay_array;
    }

    //找出所有房屋类型，返回数组（id=>name)   by:xuan
    public static function houseTypeArray(){
        $houseType_array = [""=>"请选择房屋类型"];
        $houseType = self::find()->where("pid=:pid",[':pid'=>Yii::$app->params['houseType']])->all();
        if(isset($houseType)){
            foreach ($houseType as $key => $value) {
                $houseType_array[$value['id']] = $value['name'];
            }
        }
        return $houseType_array;
    }

    //找出所有主要渗漏部位，返回数组（id=>name)   by:xuan
    public static function leakagePositionArray(){
        $leakagePosition_array = [""=>"请选择主要渗漏部位"];
        $leakagePosition = self::find()->where("pid=:pid",[':pid'=>Yii::$app->params['leakagePosition']])->all();
        if(isset($leakagePosition)){
            foreach ($leakagePosition as $key => $value) {
                $leakagePosition_array[$value['id']] = $value['name'];
            }
        }
        return $leakagePosition_array;
    }

    //找出所有支付方式，返回数组（id=>name)   by:xuan
    public static function payTypeArray(){
        $payType_array = [""=>"请选择支付方式"];
        $payType = self::find()->where("pid=:pid",[':pid'=>Yii::$app->params['payType']])->all();
        if(isset($payType)){
            foreach ($payType as $key => $value) {
                $payType_array[$value['id']] = $value['name'];
            }
        }
        return $payType_array;
    }

    
    
    //接单来源搜索          ->刘惠杰
    public static function sourcesArray2(){
        $sources_array = [];
        $sources = self::find()->where("pid=:pid",[':pid'=>Yii::$app->params['sources']])->all();
        if(isset($sources)){
            foreach ($sources as $key => $value) {
                $sources_array[$value['id']] = $value['name'];
            }
        }
        return $sources_array;
    }
    
    
    //订单状态搜索          ->刘惠杰
    public static function stateArray2(){
        $sources_array = [''=>'All'];
        $sources = self::find()->where("pid=:pid",[':pid'=>Yii::$app->params['state']])->all();
        if(isset($sources)){
            foreach ($sources as $key => $value) {
                $sources_array[$value['id']] = $value['name'];
            }
        }
        return $sources_array;
    }
    


    //订单状态搜索  返回待报价之后的数据   ->刘惠杰
    public static function stateArray3(){
        $sources_array = [''=>'All'];
        $sources = self::find()->where("pid=:pid",[':pid'=>Yii::$app->params['state']])
                               ->andWhere(['not in', 'id', [2,3,4,5]])->all(); 
                               
        if(isset($sources)){
            foreach ($sources as $key => $value) {
                $sources_array[$value['id']] = $value['name'];
            }
        }
        return $sources_array;
    }




    //工人来源          ->刘惠杰
    public static function Source(){
        $sources_array = [];
        $sources = self::find()->where("pid=:pid",[':pid'=>Yii::$app->params['source']])->all();
        if(isset($sources)){
            foreach ($sources as $key => $value) {
                $sources_array[$value['id']] = $value['name'];
            }
        }
        return $sources_array;
    }

}
